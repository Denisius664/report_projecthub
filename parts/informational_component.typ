= ИНФОРМАЦИОННАЯ СОСТАВЛЯЮЩАЯ

== ОПИСАНИЕ ИНФОРМАЦИОННОЙ БАЗЫ, СХЕМЫ ХРАНЕНИЯ

Внутренние:
- Файлы проектов (например: текст, PDF, Word, Excel, JSON), загружаемые пользователями.
- Метаданные проектов: название, автор, теги, дата загрузки, описание.
- Данные пользователей: логины, роли, права доступа.

Объем данных:
- Максимальный размер файлов одного проекта: 1 ГБ (суммарно).
- Для хранения метаинформации используется реляционная СУБД PostgreSQL.
- Для хранения оригиналов файлов используется объектное хранилище MinIO.

Структура данных:
- Данные организованы в виде реляционных таблиц, связанных через внешние ключи.
- Поддерживается иерархическая структура для предметных областей (LTREE).
- Используются гибкие форматы хранения: JSONB (для ключевых слов, метаданных файлов).

Далее представлена инфологическая модель разработанной базы данных (@fig:infomodel).

#figure(
  image("../images/infological-model.jpg", width: 90%),
  caption: "Инфологическая модель"
) <fig:infomodel>

Основные сущности:
- Пользователь (User) - участник системы с определенной ролью.
- Проект (Project) - научный проект с описанием и статусом.
- Предметная область (Subject Area) - категория/тематика проекта.
- Файл проекта (Project File) - файлы, связанные с проектом.
- Связи проектов (Project Connections) - отношения между проектами.
- Участник команды (Team Member) - пользователь, работающий над проектом.

Основные отношения:
- Пользователь создает Предметную область.
- Пользователь участвует в Проекте.
- Проект принадлежит к Предметной области.
- Проект содержит Файлы.
- Проект связан с другими Проектами.
- Участник является Пользователем.

При построении логической модели базы данных (@fig:logicmodel) были добавлены уникальные ключи для каждой сущности. Все таблицы соответствуют 3НФ (третьей нормальной форме):

- Нет повторяющихся групп (все поля атомарны).
- Нет частичных зависимостей от первичного ключа.
- Нет транзитивных зависимостей.

#figure(
  image("../images/logical-model.jpg", width: 90%),
  caption: "Логическая модель"
) <fig:logicmodel>

Для физической модели базы данных была выбрана СУБД PostgreSQL, обоснование выбора которой будет представлена в следующих главах. Схема модели представлена ниже (@fig:phisicalmodel).

#figure(
  image("../images/physical-model.jpg", width: 90%),
  caption: "Физическая модель"
) <fig:phisicalmodel>

Веб-приложение использует гибридный подход к хранению данных, сочетающий реляционную базу данных PostgreSQL для структурированной информации и объектное хранилище MinIO для файловых данных.

Основные компоненты:
PostgreSQL - центральное хранилище структурированных данных:
- Метаданные пользователей, проектов, предметных областей.
- Отношения между сущностями (связи проектов, участники команд).
- Иерархические данные через LTREE.
- Гибкие данные в JSONB (ключевые слова, метаданные файлов).

MinIO - объектное хранилище для файлов:
- Оригиналы файлов проектов.

Поток данных:
- Пользователь загружает файл → файл сохраняется в MinIO → метаданные записываются в PostgreSQL.
- Поиск по проектам → запрос к PostgreSQL → результаты включают ссылки на файлы в MinIO.
- Скачивание файла → проверка прав в PostgreSQL → генерация пре-подписанного URL для MinIO.

== МЕХАНИЗМЫ СБОРА И ОБРАБОТКИ ДАННЫХ

Сбор данных:
- Загрузка файлов, установка связей между проектами, регистрация пользователей через соответствующие API-эндпоинты.
- Создание проектов, предметных областей, участников команд через соответствующие POST-эндпоинты.

Обработка данных:
- Автоматическое извлечение метаданных файлов (размер, тип) при загрузке.
- Использование вычисляемых полей (например, citation_count)
- Поддержка иерархических запросов к предметным областям с использованием LTREE.
- Расширенный поиск по проектам с фильтрацией по ключевым словам, статусу, публичности.
- Управление доступом через роли пользователей (админ, пользователь).

API как основной интерфейс взаимодействия:
- Аутентификация через JWT-токены.
- RESTful-эндпоинты для всех сущностей системы.
- Поддержка пагинации, фильтрации, поиска.