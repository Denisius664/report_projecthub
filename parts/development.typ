= Подробное описание разработки проекта

== Выбор технологий и инструментов, моделей, алгоритмов

Для разработки проекта, были выбраны следующие технологии и инструменты:
+ База данных: PostgreSQL. 
 - Высокая производительность, поддержка JSONB и LTREE для хранения гибких метаданных и иерархий, открытая лицензия, наличие Docker-образа для удобного развертывания.
+ Хранилище файлов: MinIO. 
 - Совместимость с S3 API, высокая производительность по сравнению с другими открытыми продуктами, политика лицензирования, популярность, наличие Docker-образа.
+ Бэкенд: FastAPI (Python).
 - Простота изучения, минимальное число зависимостей, необходимый функционал для реализации JWT-аутентификации и авторизации, высокая производительность для построения API.
+ Фронтенд: Vue 3 (TypeScript). 
 - Относительная простота разработки по сравнению с React и Angular, подходит для небольшого проекта, богатый набор библиотек.
+ Безопасность: JWT-токены. 
 - Удобный в использовании, высокий стандарт безосопасности.
+ Инфраструктура: Docker-образы
 - Удобное развертывание на незнакомой инфраструктуре; поддержка Linux или Windows для серверов.

== Архитектура приложения (общая схема архитектуры, компоненты и уровни системы, взаимодействие между модулями, описание классов)

Система ProjectHub построена на классической клиент-серверной архитектуре с использованием REST API для взаимодействия между компонентами. Это многослойная архитектура, где клиентская часть отвечает за пользовательский интерфейс и взаимодействие с пользователем, а серверная часть обрабатывает бизнес-логику, управляет данными и обеспечивает безопасность. Данные хранятся в централизованной базе данных, а файлы проектов — в отдельном объектном хранилище. Такая архитектура позволяет обеспечить масштабируемость, отказоустойчивость и разделение ответственности между компонентами((@fig:sequence_diagram)).

#figure(
  image("../images/sequence_diagram.jpg", width: 90%),
  caption: "Взаимодействие между компанентами"
) <fig:sequence_diagram>

Основные компоненты и уровни системы:
- Клиентская часть: Реализована как веб-приложение на TypeScript с использованием фреймворка Vue 3. Обеспечивает удобный пользовательский интерфейс для регистрации, авторизации, загрузки проектов, поиска и фильтрации. Взаимодействует с сервером через REST API, отправляя запросы и получая ответы в формате JSON.
- Серверная часть: Реализована на Python с использованием FastAPI. Обрабатывает запросы от клиента, выполняет валидацию данных, управляет бизнес-логикой, контролирует права доступа пользователей и взаимодействует с базой данных и файловым хранилищем.
- База данных: PostgreSQL с использованием расширений JSONB (для хранения гибких метаданных) и LTREE (для иерархий предметных областей). Структура нормализована (3НФ), включает таблицы для пользователей, проектов, предметных областей, файлов, связей между проектами и участников.
- Объектное хранилище файлов: MinIO (совместимо с Amazon S3). Хранит оригинальные файлы проектов; в БД хранятся только ссылки (URL) и метаданные.

Взаимодействие между модулями:
- Клиент отправляет HTTP-запросы к серверу через REST API с JWT-токеном в заголовке.
- Сервер проверяет токен, определяет пользователя и права доступа.
- Запрос передается в соответствующий модуль (например, аутентификация, управление проектами или файлами).
- Сервер взаимодействует с PostgreSQL (для данных) и/или MinIO (для файлов).
- Формируется ответ и возвращается клиенту.

Структура серверной части (модули):
- Модуль аутентификации и авторизации: Регистрация и вход с валидацией; генерация и валидация JWT; контроль прав на основе ролей (админ, участник и т.д.).
- Модуль управления пользователями: CRUD-операции для пользователей; управление ролями и связями с проектами.
- Модуль управления проектами: CRUD-операции для проектов, предметных областей, участников; связи между проектами, фильтрация и поиск по метаданным.
- Модуль работы с файлами: Загрузка, хранение метаданных, получение ссылок на файлы.
- Интеграция с БД: Взаимодействие с PostgreSQL для структурированных данных.
- Интеграция с хранилищем: Взаимодействие с MinIO для загрузки и получения файлов.

Архитектура хранилища:
- Реляционная БД PostgreSQL: Хранит структурированную информацию (пользователи, проекты, метаданные).
- Объектное хранилище MinIO: Хранит файлы; принцип — загрузка через сервер, запись URL в БД, выдача pre-signed URL для доступа.

Структура кода клиентского приложения:
- Страницы представляют собой компоненты Vue 3.
- Переходы между страницами реализованы с помощью vue router, включая перенаправление на страницу входа для неавторизованных пользователей.
- Связи между страницами — через ссылки router link.

==  Интерфейс пользователя

Список страниц: домашняя, страница проекта, страница настроек проекта, страница профиля пользователя, страница создания проекта, страница входа.

Был разработан интерфейс для загрузки, поиска и фильтрации проектов; удобный и интуитивно понятный веб-интерфейс. Реализованы функции поиска, фильтрации; поддержка просмотра файлов прямо на платформе (для таблиц, кодов, документов; другие файлы скачиваются).

==  Логика работы основных функций
Для пользователя:
- Регистрация и авторизация в системе (через корпоративную почту ТюмГУ).
- Загрузка файлов проекта.
- Поиск и фильтрация проектов по метаданным (название, теги, дата создания, описание, предметная область).
- Просмотр своих загруженных работ и их метаданных.
- Настройка параметров проекта: изменение названия, описания, тегов, предметной области.
- Настройка участников проекта (приглашение, назначение ролей).
- Параметры файлов; ссылка на проект (для ссылок на другие работы).
- Создание и настройка проекта (публичный/приватный; видимость файлов и участников).
- Хранение любых типов файлов (просмотр таблиц на платформе; скачивание остальных).
- Выход из проекта.

Для куратора:
- Поиск и фильтрация проектов студентов.
- Редактирование метаданных проектов (название, автор, теги, описание).
- Управление правами доступа к проектам.

Общая логика ключевых функций:
- Загрузка файлов: Клиент отправляет файл на сервер; сервер сохраняет в MinIO, получает URL; записывает метаданные в PostgreSQL.
- Поиск и фильтрация: По полям (название, описание, теги, предметная область); автоматическая загрузка данных из систем вуза.
- Просмотр/скачивание: Клиент запрашивает URL через сервер; сервер проверяет права и выдает pre-signed URL или проксирует файл.
- Безопасность: Защита от несанкционированного доступа (шифрование, управление правами); контроль формата и размера файлов (макс. 1 ГБ; форматы: txt, PDF (текст/сканы), Word, Excel, JSON).
- Поток обработки запроса: Клиент отправляет запрос с JWT; сервер проверяет токен и права; передает в модуль; взаимодействует с БД/MinIO; возвращает ответ.

== Примеры фрагментов кода (по необходимости)

== Преодоленные сложности и принятые технические решения
- Выбор PostgreSQL и MinIO для удобного развертывания (Docker-образы) решает проблему развертывания на незнакомой инфраструктуре.
- Использование FastAPI для простоты и минимальных зависимостей упрощает разработку.
- JWT для авторизации без SSO решает вопрос безопасности.
- Нормализация БД (3НФ) минимизирует избыточность и повышает целостность.